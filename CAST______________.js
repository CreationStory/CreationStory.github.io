const CAST____ = window.innerWidth <= 1240 ? "74" : window.innerWidth <= 1500 ? "104" : window.innerWidth >= 2550 ? "190" : "140";
function Casts124(t) { let e = document.querySelectorAll(".CASTS"), a = document.querySelector(".R"); e.forEach(e => { if (e.id === t) { if (e.getAttribute("data-src")) { let dataSrc = e.getAttribute("data-src") + `&zoom=${CAST____}`; e.src = dataSrc; e.removeAttribute("data-src");} e.style.display = "block"; } else { e.style.display = "none"; }}); a.style.display = "none"; }
function navigateToBookFromHash() { let hash = window.location.hash.substr(1).toLowerCase(), e = document.querySelectorAll(".CASTS"), isFullStopSeparated = hash.includes("."); let a = false; e.forEach(e => { if (e.id.toLowerCase() === hash || (isFullStopSeparated && e.id.toLowerCase() === hash.split(".")[0])) { Casts124(e.id); let page = isFullStopSeparated ? hash.split(".")[1] || 1 : 1; let o = `CAST/VECTORS/${e.id}.pdf#toolbar=0&fit=Fit&zoom=${CAST____}&page=${page}`; e.src = o; a = true; }}); if (!a) { let match = hash.match(/^([a-z]+)(\d*)$/); if (match) { let title = match[1].toLowerCase(); let pageNumber = match[2]; const alternativeTitles = {
firstsamuel: "Samuel",
secondsamuel: "Samuel2",
firstkings: "Kings",
secondkings: "Kings2",
firstchronicles: "Chronicles",
secondchronicles: "Chronicles2",
thegospelofmatthew: "Matthew",
gospelofmatthew: "Matthew",
thegospelofmark: "Mark",
gospelofmark: "Mark",
thegospelofluke: "Luke",
gospelofluke: "Luke",
thegospelofjohn: "John",
gospelofjohn: "John",
theactsoftheapostles: "Acts",
theactsofapostles: "Acts",
actsoftheapostles: "Acts",
actsofapostles: "Acts",
thedeedsoftheapostles: "Acts",
deedsoftheapostles: "Acts",
deedsofapostles: "Acts",
theepistleofpaultotheromans: "Romans",
thefirstepistleofpaultothecorinthians: "Corinthians",
firstepistleofpaultothecorinthians: "Corinthians",
firstcorinthians: "Corinthians",
thesecondepistleofpaultothecorinthians: "Corinthians2",
secondepistleofpaultothecorinthians: "Corinthians2",
secondcorinthians: "Corinthians2",
thefirstepistleofpaultothegalatians: "Galatians",
firstepistleofpaultothegalatians: "Galatians",
theepistleofpaultotheephesians: "Ephesians",
epistleofpaultotheephesians: "Ephesians",
theepistleofpaultothephilippians: "Philippians",
epistleofpaultothephilippians: "Philippians",
theepistleofpaultothecolossians: "Colossians",
epistleofpaultothecolossians: "Colossians",
thefirstepistleofpaultothethessalonians: "Thessalonians",
firstepistleofpaultothethessalonians: "Thessalonians",
firstthessalonians: "Thessalonians",
thesecondepsitleofpaultothethessalonians: "Thessalonians2",
secondepistleofpaultothethessalonians: "Thessalonians2",
secondthessalonians: "Thessalonians2",
thefirstepistleofpaultotimothy: "Timothy",
firstepistleofpaultotimothy: "Timothy",
firsttimothy: "Timothy",
thesecondepistleofpaultotimothy: "Timothy2",
secondepistleofpaultotimothy: "Timothy2",
secondtimothy: "Timothy2",
theepistleofpaultotitus: "Titus",
epistleofpaultotitus: "Titus",
theepistleofpaultophilemon: "Philemon",
epistleofpaultophilemon: "Philemon",
theepistletothehebrews: "Hebrews",
epistletothehebrews: "Hebrews",
theepistleofjames: "James",
epistleofjames: "James",
thefirstepistleofpeter: "Peter",
firstepistleofpeter: "Peter",
firstpeter: "Peter",
thesecondepistleofpeter: "Peter2",
secondepistleofpeter: "Peter2",
secondpeter: "Peter2",
thefirstepistleofjohn: "FirstEpistleofJohn",
firstjohn: "FirstEpistleofJohn",
thesecondepistleofjohn: "SecondEpistleofJohn",
secondjohn: "SecondEpistleofJohn",
thethirdepistleofjohn: "ThirdEpistleofJohn",
thirdjohn: "ThirdEpistleofJohn",
thebookofrevelation: "Revelation",
thebookofrevelations: "Revelation",
bookofrevelation: "Revelation",
bookofrevelations: "Revelation",
revelations: "Revelation"};
let mappedTitle = alternativeTitles[title]; if (mappedTitle) { e.forEach(t => { if (t.id.toLowerCase() === mappedTitle.toLowerCase()) { Casts124(t.id); let page = isFullStopSeparated ? hash.split(".")[1] || pageNumber : pageNumber || 1; let e = `CAST/VECTORS/${mappedTitle}.pdf#toolbar=0&fit=Fit&zoom=${CAST____}&page=${page}`; t.src = e; a = true; }});} } } if (!a) { let o = hash.match(/^([a-z]+)(\d+)$/); if (o) { let l = o[1], i = parseInt(o[2]); e.forEach(t => { if (t.id.toLowerCase() === l) { Casts124(t.id); let page = isFullStopSeparated ? hash.split(".")[1] || i : i; let e = `CAST/VECTORS/${l}.pdf#toolbar=0&fit=Fit&zoom=${CAST____}&page=${page}`; t.src = e; a = true; }}); }} setTimeout(function() { history.replaceState(null, null, window.location.pathname); }, 480); }
window.onload = function() { setTimeout(function() { navigateToBookFromHash(), history.replaceState(null, null, window.location.pathname); }, 480); };
window.addEventListener("hashchange", navigateToBookFromHash);